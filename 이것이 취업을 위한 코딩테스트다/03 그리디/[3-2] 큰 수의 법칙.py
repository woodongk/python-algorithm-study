"""
[큰 수의 법칙]
<문제>
동빈이의 큰수의 법칙은 다양한 수로 이루어진 배열이 있을 때 주어진 수들을 M번 더하여 가장 큰수를 만드는 방법이다. 단, 배열의 특정한 인덱스에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없는 것이 이 법칙의 특징이다.

예를 들어 순서대로 2, 4, 5, 4, 6으로 이루어진 배열이 있을 때, M이 8이고 K가 3이라고 가정하자.

이 경우 특정한 인덱스의 수가 연속해서 세 번까지만 더해질 수 있으므로 큰 수의 법칙에 따른 결과는 6 + 6 + 6 + 5 + 6 + 6 + 6 + 5인 46이 된다. 단, 서로 다른 인덱스에 해당하는 수가 같은 경우에도 서로 다른 것으로 간주한다.

예를 들어 순서대로 3, 4, 3, 4, 3으로 이루어진 배열이 있을 때 M이 7이고 K가 2라고 가정하자. 이 경우 두 번째 원소에 해당하는 4와 네 번째 원소에 해당하는 4를 번갈아 두 번씩 더하는 것이 가능하다.

결과적으로 4 + 4 + 4 + 4 + 4 + 4 + 4 인 28이 도출된다.
배열의 크기 N, 숫자가 더해지는 횟수 M, 그리고 K가 주어질 때 동빈이의 큰 수의 법칙에 따른 결과를 출력하시오.

<입력 조건>

첫째 줄에 N(2 <= N <= 1000), M(1 <= M <= 10000), K(1 <= K <= 10000) 의 자연수가 주어지며 각자연수는 공백으로 구분한다.

둘째 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분한다.
단, 각각의 자연수는 1 이상 10000 이하의 수로 주어진다.
입력으로 주어지는 K는 항상 M보다 작거나 같다.

<출력 조건>

첫째 줄에 동빈이의 큰수의 법칙에 따라 더해진 답을 출력한다.
<입력 예시>

5 8 3
2 4 5 4 6

<출력 예시>
46
"""


#  풀이 1. 규칙 찾아서 풀기
#  최대값을 구하기 위해서는 가장 큰 수를 K 번, 그 다음으로 큰 수를 1번 반복해야 한다.
#  즉, K * 가장 큰 수 + 1 * 둘째로 큰 수 ... 반복
def large_sum(n, m, k, nums):
    nums.sort()  # 최대값과 둘째 최대값을 구하기 위해 리스트 정렬

    first = int(m / k)  # 최대값 더할 숫자
    second = m % k  # 둘째 최대값 더할 숫자

    return nums[-1] * first * k + nums[-2] * second

# 풀이 2. Greedy 하게 풀기 (알고리즘적 사고 함양)
def large_sum2(n, m, k, nums):

    first = nums[-1] # 가장 큰 수
    second = nums[-2] # 그 다음으로 큰 수

    sum = 0
    count = 0

    while m > 0:
        if count < k:
            sum += first
            count += 1
        else:
            count = 0
            sum += second
        m -= 1

    return sum


if __name__ == '__main__':

    n, m, k = map(int, input().split())
    nums = list(map(int, input().split()))

    print(large_sum(n, m, k, nums))
    print(large_sum2(n, m, k, nums))




